syntax = "proto3";

package mesycontrol.proto;

// ===== Requests =====

// response: ScanbusResult
message RequestScanbus {
  uint32 bus = 1;
}

// response: ResponseRead
message RequestRead {
  uint32 bus  = 1;
  uint32 dev  = 2;
  uint32 par  = 3;
  bool mirror = 4;
}

// response: SetResult
message RequestSet {
  uint32 bus  = 1;
  uint32 dev  = 2;
  uint32 par  = 3;
  sint32 val  = 4;
  bool mirror = 5;
}

// response: ResponseBool
message RequestRC {
  uint32 bus = 1;
  uint32 dev = 2;
  bool   rc  = 3;
}

// response: ResponseBool
message RequestReset {
  uint32 bus = 1;
  uint32 dev = 2;
}

// response: ResponseBool
message RequestCopy {
  uint32 bus = 1;
  uint32 dev = 2;
}

// response: ResponseReadMulti
message RequestReadMulti {
  uint32 bus    = 1;
  uint32 dev    = 2;
  uint32 par    = 3;
  uint32 count  = 4;
}

// response: ResponseBool
message RequestAcquireWriteAccess {
  bool force = 1;
}

// response: ResponseBool
message RequestSetSilenced {
  bool silenced = 1;
}

// response: ResponseBool
message RequestSetPollItems {
  message PollItem {
    uint32 bus    = 1;
    uint32 dev    = 2;
    uint32 par    = 3;
    uint32 count  = 4;
  }

  repeated PollItem items = 1;
}

// ===== Responses =====

message ResponseBool {
  bool value = 1;
}

message ResponseError {
  enum ErrorType {
    UNKNOWN           =  0;
    NO_RESPONSE       =  1; // MRC received 'no resp' -> device not present.
    ADDRESS_CONFLICT  =  2; // The command failed due to an address conflict on the bus.
    CONNECTING        =  3; // The MRC connection is being established.
    CONNECT_ERROR     =  4; // The MRC connection could not be established
    COM_TIMEOUT       =  5; // MRC communication timed out.
    COM_ERROR         =  6; // An error occured while communicating with the MRC.
    SILENCED          =  7; // Silent mode is active
    PERMISSION_DENIED =  8; // The client does not have write access
    PARSE_ERROR       =  9; // Could not parse the MRC response.
    INVALID_TYPE      = 10; // Message type is not a valid request.
    INVALID_MESSAGE   = 11; // Message could not be deserialized.
  }

  ErrorType type  = 1;
  string info     = 2;
}

message ScanbusResult {
  message ScanbusEntry {
    uint32 idc    = 1;
    bool rc       = 2;
    bool conflict = 3;
  }

  uint32 bus                    = 1;
  repeated ScanbusEntry entries = 2;
}

message ResponseRead {
  uint32 bus  = 1;
  uint32 dev  = 2;
  uint32 par  = 3;
  sint32 val  = 4;
  bool mirror = 5;
}

message SetResult {
  uint32 bus              = 1;
  uint32 dev              = 2;
  uint32 par              = 3;
  sint32 val              = 4;
  sint32 requested_value  = 5;
  bool mirror             = 6;
}

message ResponseReadMulti {
  uint32 bus              = 1;
  uint32 dev              = 2;
  uint32 par              = 3;
  repeated sint32 values  = 4 [packed=true];
}

message MRCStatus {
  enum StatusCode {
    STOPPED         = 0; // Not connected to the MRC
    CONNECTING      = 1; // The connection is being established.
    CONNECT_FAILED  = 2; // The last connection attempt failed.
    INITIALIZING    = 3; // Connection is established. MRC initialization sequence is run.
    INIT_FAILED     = 4; // Initialization sequence did not yield the expected output.
    RUNNING         = 5; // MRC connection established and ready to accept requests.
  }

  StatusCode code     = 1;
  int32 reason        = 2; // boost::system::error_code::value()
  string info         = 3; // Additional status information. (boost::system::error_code::message())
  string version      = 4; // The MRC version if known.
  bool has_read_multi = 5; // True if read multi ('rb' command) is available.
}

message NotifyWriteAccess {
  bool has_access   = 1;
  bool can_acquire  = 2; // True if no client currently has write access.
}

message NotifySilenced {
  bool silenced = 1;
}

message NotifyPolledItems {
  message PollResult {
    uint32 bus              = 1;
    uint32 dev              = 2;
    uint32 par              = 3;
    repeated sint32 values  = 4;
  }

  repeated PollResult items = 1;
}

message NotifyClientList {
  message ClientEntry {
    string id         = 1; // Unique client identifier (host:port)
    bool write_access = 2; // True if the client has write access.
  }
  repeated ClientEntry entries = 1;
}

message Message {
  enum Type {
    // ===== Requests =====
    REQ_SCANBUS               =  0; // response uses scanbus_result
    REQ_READ                  =  1;
    REQ_SET                   =  2; // response uses set_result
    REQ_RC                    =  3; // response uses response_bool
    REQ_RESET                 =  4; // response uses response_bool
    REQ_COPY                  =  5; // response uses response_bool
    REQ_READ_MULTI            =  6;

    REQ_MRC_STATUS            = 10; // response uses mrc_status
    REQ_HAS_WRITE_ACCESS      = 11; // response uses response_bool
    REQ_ACQUIRE_WRITE_ACCESS  = 12; // response uses response_bool
    REQ_RELEASE_WRITE_ACCESS  = 13; // response uses response_bool
    REQ_IS_SILENCED           = 14; // response uses response_bool
    REQ_SET_SILENCED          = 15; // response uses response_bool
    REQ_SET_POLL_ITEMS        = 16; // response uses response_bool

    // ===== Responses =====
    RESP_BOOL                 = 20;
    RESP_ERROR                = 21;
    RESP_SCANBUS              = 22;
    RESP_READ                 = 23;
    RESP_SET                  = 24;
    RESP_READ_MULTI           = 25;
    RESP_MRC_STATUS           = 26;

    // ===== Notifications =====
    NOTIFY_SCANBUS            = 31; // uses scanbus_result
    NOTIFY_MRC_STATUS         = 32; // uses mrc_status
    NOTIFY_WRITE_ACCESS       = 33; // uses notify_write_access
    NOTIFY_SILENCED           = 34; // uses notify_silenced
    NOTIFY_SET                = 35; // uses set_result
    NOTIFY_POLLED_ITEMS       = 36; // uses notify_polled_items
    NOTIFY_CLIENT_LIST        = 37; // uses notify_client_list
  }

  Type type                                               = 1;

  RequestScanbus            request_scanbus               = 2;
  RequestRead               request_read                  = 3;
  RequestSet                request_set                   = 4;
  RequestRC                 request_rc                    = 5;
  RequestReset              request_reset                 = 6;
  RequestCopy               request_copy                  = 7;
  RequestReadMulti          request_read_multi            = 8;
  RequestAcquireWriteAccess request_acquire_write_access  = 9;
  RequestSetSilenced        request_set_silenced          = 10;
  RequestSetPollItems       request_set_poll_items        = 11;

  ResponseBool              response_bool                 = 12;
  ResponseError             response_error                = 13;
  ResponseRead              response_read                 = 14;
  ResponseReadMulti         response_read_multi           = 15;

  SetResult                 set_result                    = 16;
  ScanbusResult             scanbus_result                = 17;
  MRCStatus                 mrc_status                    = 18;
  NotifyWriteAccess         notify_write_access           = 19;
  NotifySilenced            notify_silenced               = 20;
  NotifyPolledItems         notify_polled_items           = 21;
  NotifyClientList          notify_client_list            = 22;
}
