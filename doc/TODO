=== GUI from the top ===
* Linked Mode
  - Defaults to off: hw and cfg views are not linked. Editing a device happens
    either on the hardware _or_ the _config_ side, not both at the same time.
    This means the table view displays and edits either a config or a hardware
    device.
  - If the user enables linked mode the tree view links both trees together,
    matching hw and cfg nodes and creating nodes for missing devices and
    non-existing device configs. IDC mismatches should be highlighted.
    Table view should go into hw+cfg mode, showing both columns and
    highlighting differences.
  - Device GUIs and linked mode (XXX WIP):
    GUI should work with only hardware (+hidden cfg for extensions?), only
    config (no read only params in config, no polling) and both (syncing cfg &
    hw; possibly toggleable).
  - Session state should be saved:
    - Last opened setup
    - Active connections
    - Open windows
    - Mainwindow state (docks, size, position)
    - Linked mode

* Window management
  - it is possible to open multiple table views for the same device
  - double click on a device should open new a device tableview if none exists yet.
    otherwise the existing table views for the device should be raised to the front
  - treeview single clicks should raise existing table views to the front
  - ctrl-click should open a new tableview even if one exists
  
    * Window management
      - close if app_model.Device disappears completely (hw and cfg missing)

* TreeView display & actions:
  - create setup/config from hardware
  - check/apply setup/config
  - rc on/off
  - polling
  - silent mode
  - prompts on close/overwrite/...
    * TreeView sorting by MRC name (needs logic to keep hardware tree in sync in linked mode)
      - app_model -> row mapping?

* Table view:
  - hw centric & config centric mode
  - create config
  - idc & address conflicts
  - edit config
  - copy paste of values

    - columns
    - editing
    - display of values that are not available (yet)
    - hw connect/disconnect
    - cfg empty, loaded, ...
    - hw/cfg set
    - idc changes!

* Device support
  - Update device classes
  - Default values for parameters and extensions when creating a config
  - RC handling (memory refresh needed?)
  - Update GUIs (idc conflicts, address conflict, disconnect, param could not
    be set, delayed spinboxes, parameter bindings)

* Specialized device classes: how? when? case for unknown devices?
  * device profile:
     depends on device idc
     contains parameter descriptions which contain
      - address
      - name
      - TODO: basename for indexed parameters (why did i not add this before? problems? problem if basename == some_other_param_name!)
      - index number for indexed parameters
      - flags (ro, no_store, poll, critical)
      - safe_value for critical params
      - range limiting the value range
      - units: list of unit definitions
      - default value used when creating a device config (if none given should default to min value, if neither given default to 0)
      - read/write addresses

 * device class:
    - depends on device idc and the corresponding profile
    - provides device specific functionality (accessors, complex functions, limits, ...)
    - may use config extensions for calculations and enabling of features
    - may set config extensions
    - creation: when? once instance only or multiple instances?

* TreeView columns and displayed data
    * TreeView actions (apply cfg, dev to config, check config, polling, rc)
        - open/load/save/check setup
        - open/load/save/check config
        - (re)name mrc, device
        - edit mrc connection config
    * Better connection status display
        - Animated icon while connecting
        - Display last_connection_error in tooltip.

* Connection handling:
  - More robust and testable and tested implementation (it works for now). -> ServerProcess2

* User friendly action logging
    - Separate from normal application logging or introduce a new 'user' log
      level and user specific log records (e.g. carrying icon info to show next
      to a logged message)
